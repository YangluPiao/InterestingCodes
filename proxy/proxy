#!/usr/bin/env python

import socket
import sys,os
import select,time,re
from threading import Thread,current_thread


class Forwarder(Thread):
    def __init__(self,Cli_Sock,log_f,alpha,fake_ip,server_ip):
        Thread.__init__(self)
        self.send_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.send_sock.bind((fake_ip,0))
        self.send_sock.settimeout(None)
        self.send_sock.connect((server_ip,80))
        self.Cli_Sock=Cli_Sock
        self.log_f=open(log_f,'w')
        self.alpha=alpha
        self.server_ip=server_ip
        # Set regex
        self.extract_reply=re.compile(r'GET.*HTTP/1\.1')
        self.extract_segment=re.compile(r'GET /vod/.*Seg.* HTTP/1\.1')
        self.content_length_re=re.compile(r'Content-Length: \d+')
        # EWMA average throughput
        self.throughput=None 

    def run(self):
        bitrate=0
        try:
            input_list=[self.Cli_Sock,self.send_sock]
            loop_enabled=True
            # Record timestamps at which transmission of a chunk starts and ends
            chunk_start=0
            chunk_end=0
            # Find available bitrates of video chunks
            available=[]
            with open('/var/www/vod/big_buck_bunny.f4m','r') as f:
                for line in f:
                    found=re.findall(r'bitrate=\"\d+\"',line)
                    if len(found)>0:
                        available.append(int(re.findall(r'\d+',found[0])[0]))
            available.sort(key=int, reverse=True)
            while loop_enabled:
                inputready, outputready, exceptready = select.select(input_list,[],[])
                for input_item in inputready:
                    data = input_item.recv(1024)
                    if input_item==self.Cli_Sock:
                        # Find big_buck_bunny.f4m in the header
                        fake_bunny=len(re.findall(r'big\_buck\_bunny',data))>0
                        get_chunk=re.findall(self.extract_segment,data)
                        if fake_bunny:
                            # If found, request big_buck_bunny_nolist.f4m instead
                            data=re.sub(r'big\_buck\_bunny','big_buck_bunny_nolist',data)
                            # send_sock.sendall(make_up)
                        ## Choose appropriate bitrate for video chunks, if bandwidth is too small, just
                        #  choose the ones whose bitrate=10
                        elif len(get_chunk)>0:
                            bitrate=min(available)
                            make_up=re.sub(
                                r'GET /vod/\d+Seg',
                                'GET /vod/%sSeg'%(bitrate),
                                data
                                )
                            for rate in available:
                                if self.throughput>=1.5*rate:
                                    bitrate=rate
                                    make_up=re.sub(
                                        r'GET /vod/\d+Seg',
                                        'GET /vod/%sSeg'%(bitrate),
                                        data
                                        )
                                    break
                            chunk_end=time.time()
                            data=make_up
                        try:
                            self.send_sock.sendall(data)
                        except Exception,e:
                            loop_enabled=False
                            print '1. ',current_thread()
                            break
                        # Find all the 'GET' in requests
                        result=re.findall(self.extract_reply,data)
                        # Send request to the server
                        received=self.send_sock.recv(1024)
                        # Forward response from server to the client
                        try:
                            self.Cli_Sock.sendall(received)
                        except Exception,e:
                            loop_enabled=False
                            print '2. ',current_thread()
                            break
                        received=received[:200]
                        # If 'GET' is found
                        if len(result)>0:
                            # If 'GET' is requesting video chunks
                            if self.extract_segment.match(data) is not None:
                                curr_file=re.findall(r'\d+Seg.*Frag\d+',result[0])[0]
                                content_length=re.findall(self.content_length_re, received)
                                if len(content_length)>0:
                                    file_bytes=re.findall(r'\d+',content_length[0])
                                    curr_file_size=int(file_bytes[0])*8
                                    
                                # Calculate throughput for LAST file
                                trans_time=chunk_end-chunk_start
                                throughput_new=curr_file_size/trans_time/1024
                                if not self.throughput:
                                    self.throughput=throughput_new
                                else:
                                    self.throughput=self.alpha*(throughput_new)+(1-self.alpha)*self.throughput
                                    print_msg='%.6f %f %d %d %d %s %s'\
                                        %(time.time(),trans_time,throughput_new,self.throughput,bitrate,self.server_ip,curr_file)
                                    if chunk_start!=0:
                                        print print_msg
                                        print>>self.log_f,print_msg
                                chunk_start=chunk_end
                        else:
                            # No more requests, jump out the loop and kill the thread
                            loop_enabled=False
                            print 'thread finished'
                            break
                    elif input_item==self.send_sock:
                        try:
                            self.Cli_Sock.sendall(data)
                            # print current_thread()
                        except Exception,e:
                            loop_enabled=False
                            print '3. ',current_thread()
                            break
        except Exception, e:
            _,_, exc_tb = sys.exc_info()
            print e,exc_tb.tb_lineno

        self.Cli_Sock.close()
        self.send_sock.close()


class Listener(object):
    def __init__(self,log_f,alpha,listen_port,fake_ip,server_ip):
        self.log_f=log_f
        self.alpha=alpha
        self.Serv_Sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.Serv_Sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.Serv_Sock.bind(('',listen_port))
        self.Serv_Sock.listen(5)
        self.fake_ip=fake_ip
        self.server_ip=server_ip
    def listen(self):
        threads = []
        try:
            while True:
                Cli_Sock,Cli_addr=self.Serv_Sock.accept()
                Cli_Sock.settimeout(None)
                print 'Connection received from: ', Cli_Sock,Cli_addr
                proxy=Forwarder(Cli_Sock,self.log_f,self.alpha,self.fake_ip,self.server_ip)
                proxy.daemon=True
                proxy.start()
                threads.append(proxy)
        except KeyboardInterrupt:
            proxy.log_f.close()
            self.Serv_Sock.close()
            sys.exit(0)

def main():
    listener=Listener(sys.argv[1],float(sys.argv[2]),int(sys.argv[3]),sys.argv[4],sys.argv[5])
    listener.listen()

if __name__ == '__main__':   
    if len(sys.argv) < 6:
        print 'Usage: \'./proxy <log><alpha><listen-port><fake_ip><server_ip>\'\n'
        sys.exit(2)
    main()
